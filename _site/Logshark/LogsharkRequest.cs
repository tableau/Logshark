using Logshark.Config;
using Logshark.Controller;
using Logshark.Extensions;
using System;
using System.Collections.Generic;
using System.IO;

namespace Logshark
{
    /// <summary>
    /// Encapsulates state about what Logshark should process.
    /// </summary>
    public class LogsharkRequest
    {
        protected LogsharkRequestTarget target;
        protected string runId;
        protected string source;
        protected string postgresDatabaseName;
        protected string projectName;
        protected string projectDescription;
        protected bool startLocalMongo;
        protected int localMongoPort;
        protected bool dropMongoDbPostRun;
        protected bool forceParse;
        protected bool processDebug;
        protected bool publishWorkbooks;
        protected bool processFullLogset;

        #region Public Properties

        // Runtime configuration options for this request.
        public LogsharkConfiguration Configuration { get; private set; }

        // Indicates whether the MongoDB instance generated by this request should be dropped following the run.
        public bool DropMongoDBPostRun
        {
            get { return dropMongoDbPostRun; }
            set { dropMongoDbPostRun = value; }
        }

        // Force a logset parse even if there's a matching hash in the DB.
        public bool ForceParse
        {
            get { return forceParse; }
            set { forceParse = value; }
        }

        // The port that Mongo will run on, if run locally.
        public int LocalMongoPort
        {
            get { return localMongoPort; }
            set { localMongoPort = value; }
        }

        // Used to hold metadata about this request.
        public IDictionary<string, object> Metadata { get; protected set; }

        // Used for plumbing custom arguments to plugins.
        public IDictionary<string, object> PluginCustomArguments { get; protected set; }

        // List of names of plugins to execute as a part of this request.  Also accepts "all" or "none".
        public ISet<string> PluginsToExecute { get; protected set; }

        // The name of the backing database to use.  Defaults to RunID.
        public string PostgresDatabaseName
        {
            get
            {
                if (!String.IsNullOrWhiteSpace(postgresDatabaseName))
                {
                    return postgresDatabaseName;
                }

                return RunId;
            }
            set { postgresDatabaseName = value; }
        }

        // Enable processing of debug level logs
        public bool ProcessDebug
        {
            get { return processDebug; }
            set { processDebug = value; }
        }

        // Force processing of the full logset, even if we don't need all of the data.
        public bool ProcessFullLogset
        {
            get { return processFullLogset; }
            set { processFullLogset = value; }
        }

        // The description of the Tableau Server project used for any published workbooks.  If not set, a default will be generated.
        public string ProjectDescription
        {
            get
            {
                if (!String.IsNullOrWhiteSpace(projectDescription))
                {
                    return projectDescription;
                }

                return null;
            }
            set { projectDescription = value; }
        }

        // The name of the Tableau Server project used for any published workbooks.  Defaults to RunID.
        public string ProjectName
        {
            get
            {
                if (!String.IsNullOrWhiteSpace(projectName))
                {
                    return projectName;
                }

                return RunId;
            }
            set { projectName = value; }
        }

        // Publish workbooks to Tableau Server at end of run.
        public bool PublishWorkbooks
        {
            get { return publishWorkbooks; }
            set { publishWorkbooks = value; }
        }

        // Timestamp of when this request was created.
        public DateTime RequestCreationDate { get; protected set; }

        // Information about the current state of processing this request.
        public LogsharkRunContext RunContext { get; protected set; }

        // Unique identifier that represents this run.
        public string RunId
        {
            get { return runId; }
            set { runId = value; }
        }

        // Indicates whether a local MongoDB process should be spun up for the lifetime of processing this request.
        public bool StartLocalMongo
        {
            get { return startLocalMongo; }
            set { startLocalMongo = value; }
        }

        // The source that created this request.
        public string Source
        {
            get { return source; }
            set { source = value; }
        }

        // The target logset to process.
        public LogsharkRequestTarget Target
        {
            get { return target; }
            set { target = value; }
        }

        // Tags that should be applied to any published workbooks.
        public ISet<string> WorkbookTags { get; protected set; }

        #endregion Public Properties

        internal LogsharkRequest(string target, LogsharkConfiguration configuration)
        {
            Target = new LogsharkRequestTarget(target);
            Configuration = configuration;
            RequestCreationDate = DateTime.UtcNow;
            RunId = GenerateRunId(Target, RequestCreationDate);

            LocalMongoPort = LogsharkConstants.MONGO_LOCAL_PORT_DEFAULT;
            Metadata = new Dictionary<string, object>();
            PluginsToExecute = new HashSet<string>();
            PluginCustomArguments = new Dictionary<string, object>();
            StartLocalMongo = configuration.LocalMongoOptions.AlwaysUseLocalMongo;
            WorkbookTags = new HashSet<string> { "Logshark", Environment.UserName };

            RunContext = new LogsharkRunContext();
        }

        protected string GenerateRunId(LogsharkRequestTarget requestTarget, DateTime requestCreationTime)
        {
            string hostnamePrefix = Environment.MachineName;
            string timeStamp = requestCreationTime.ToString("yyMMddHHmmssff");
            string targetSuffix = "";

            if (requestTarget.IsHashId)
            {
                targetSuffix = requestTarget.Target;
            }
            else if (requestTarget.IsFile || requestTarget.IsDirectory)
            {
                targetSuffix = Path.GetFileName(requestTarget).RemoveSpecialCharacters();
            }

            string generatedRunId = String.Format("{0}_{1}_{2}", hostnamePrefix, timeStamp, targetSuffix).ToLowerInvariant();

            if (generatedRunId.Length > 60)
            {
                return generatedRunId.Substring(0, 60);
            }
            else
            {
                return generatedRunId;
            }
        }
    }
}