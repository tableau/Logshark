//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Logshark
{
    
    
    /// <summary>
    /// The LogsharkConfig Configuration Section.
    /// </summary>
    public partial class LogsharkConfig : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the LogsharkConfig Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string LogsharkConfigSectionName = "Config";
        
        /// <summary>
        /// Gets the LogsharkConfig instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public static global::Logshark.LogsharkConfig Instance
        {
            get
            {
                return ((global::Logshark.LogsharkConfig)(global::System.Configuration.ConfigurationManager.GetSection(global::Logshark.LogsharkConfig.LogsharkConfigSectionName)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Logshark.LogsharkConfig.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::Logshark.LogsharkConfig.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region PostgresConnection Property
        /// <summary>
        /// The XML name of the <see cref="PostgresConnection"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string PostgresConnectionPropertyName = "PostgresConnection";
        
        /// <summary>
        /// Gets or sets settings pertaining to the Postgres database.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("Settings pertaining to the Postgres database.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Logshark.LogsharkConfig.PostgresConnectionPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Logshark.Config.PostgresConnection PostgresConnection
        {
            get
            {
                return ((global::Logshark.Config.PostgresConnection)(base[global::Logshark.LogsharkConfig.PostgresConnectionPropertyName]));
            }
            set
            {
                base[global::Logshark.LogsharkConfig.PostgresConnectionPropertyName] = value;
            }
        }
        #endregion
        
        #region MongoConnection Property
        /// <summary>
        /// The XML name of the <see cref="MongoConnection"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string MongoConnectionPropertyName = "MongoConnection";
        
        /// <summary>
        /// Gets or sets settings pertaining to the MongoDB database.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("Settings pertaining to the MongoDB database.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Logshark.LogsharkConfig.MongoConnectionPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Logshark.Config.MongoConnection MongoConnection
        {
            get
            {
                return ((global::Logshark.Config.MongoConnection)(base[global::Logshark.LogsharkConfig.MongoConnectionPropertyName]));
            }
            set
            {
                base[global::Logshark.LogsharkConfig.MongoConnectionPropertyName] = value;
            }
        }
        #endregion
        
        #region RunOptions Property
        /// <summary>
        /// The XML name of the <see cref="RunOptions"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string RunOptionsPropertyName = "RunOptions";
        
        /// <summary>
        /// Gets or sets settings pertaining to LogShark runtime options
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("Settings pertaining to LogShark runtime options")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Logshark.LogsharkConfig.RunOptionsPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Logshark.Config.RunOptions RunOptions
        {
            get
            {
                return ((global::Logshark.Config.RunOptions)(base[global::Logshark.LogsharkConfig.RunOptionsPropertyName]));
            }
            set
            {
                base[global::Logshark.LogsharkConfig.RunOptionsPropertyName] = value;
            }
        }
        #endregion
        
        #region TableauConnection Property
        /// <summary>
        /// The XML name of the <see cref="TableauConnection"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string TableauConnectionPropertyName = "TableauConnection";
        
        /// <summary>
        /// Gets or sets settings pertaining to the Tableau Server connection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("Settings pertaining to the Tableau Server connection.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Logshark.LogsharkConfig.TableauConnectionPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Logshark.Config.TableauServerConnection TableauConnection
        {
            get
            {
                return ((global::Logshark.Config.TableauServerConnection)(base[global::Logshark.LogsharkConfig.TableauConnectionPropertyName]));
            }
            set
            {
                base[global::Logshark.LogsharkConfig.TableauConnectionPropertyName] = value;
            }
        }
        #endregion
        
        #region PluginOptions Property
        /// <summary>
        /// The XML name of the <see cref="PluginOptions"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string PluginOptionsPropertyName = "PluginOptions";
        
        /// <summary>
        /// Gets or sets options related to plugin execution.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("Options related to plugin execution.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Logshark.LogsharkConfig.PluginOptionsPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Logshark.Config.PluginOptions PluginOptions
        {
            get
            {
                return ((global::Logshark.Config.PluginOptions)(base[global::Logshark.LogsharkConfig.PluginOptionsPropertyName]));
            }
            set
            {
                base[global::Logshark.LogsharkConfig.PluginOptionsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Logshark.Config
{
    
    
    /// <summary>
    /// The MongoConnection Configuration Element.
    /// </summary>
    public partial class MongoConnection : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region PoolSize Property
        /// <summary>
        /// The XML name of the <see cref="PoolSize"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string PoolSizePropertyName = "poolSize";
        
        /// <summary>
        /// Gets or sets the MongoDB max connection pool size.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The MongoDB max connection pool size.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Logshark.Config.MongoConnection.PoolSizePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual int PoolSize
        {
            get
            {
                return ((int)(base[global::Logshark.Config.MongoConnection.PoolSizePropertyName]));
            }
            set
            {
                base[global::Logshark.Config.MongoConnection.PoolSizePropertyName] = value;
            }
        }
        #endregion
        
        #region Timeout Property
        /// <summary>
        /// The XML name of the <see cref="Timeout"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string TimeoutPropertyName = "timeout";
        
        /// <summary>
        /// Gets or sets the MongoDB connection timeout, in seconds.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The MongoDB connection timeout, in seconds.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Logshark.Config.MongoConnection.TimeoutPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual int Timeout
        {
            get
            {
                return ((int)(base[global::Logshark.Config.MongoConnection.TimeoutPropertyName]));
            }
            set
            {
                base[global::Logshark.Config.MongoConnection.TimeoutPropertyName] = value;
            }
        }
        #endregion
        
        #region InsertionRetries Property
        /// <summary>
        /// The XML name of the <see cref="InsertionRetries"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string InsertionRetriesPropertyName = "insertionRetries";
        
        /// <summary>
        /// Gets or sets the number of times a failed insert should be retried.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The number of times a failed insert should be retried.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Logshark.Config.MongoConnection.InsertionRetriesPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false, DefaultValue=3)]
        public virtual int InsertionRetries
        {
            get
            {
                return ((int)(base[global::Logshark.Config.MongoConnection.InsertionRetriesPropertyName]));
            }
            set
            {
                base[global::Logshark.Config.MongoConnection.InsertionRetriesPropertyName] = value;
            }
        }
        #endregion
        
        #region Servers Property
        /// <summary>
        /// The XML name of the <see cref="Servers"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ServersPropertyName = "Servers";
        
        /// <summary>
        /// Gets or sets configuration information about the MongoDB server endpoints.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("Configuration information about the MongoDB server endpoints.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Logshark.Config.MongoConnection.ServersPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Logshark.Config.MongoServers Servers
        {
            get
            {
                return ((global::Logshark.Config.MongoServers)(base[global::Logshark.Config.MongoConnection.ServersPropertyName]));
            }
            set
            {
                base[global::Logshark.Config.MongoConnection.ServersPropertyName] = value;
            }
        }
        #endregion
        
        #region User Property
        /// <summary>
        /// The XML name of the <see cref="User"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string UserPropertyName = "User";
        
        /// <summary>
        /// Gets or sets settings related to the Mongo user.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("Settings related to the Mongo user.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Logshark.Config.MongoConnection.UserPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Logshark.Config.MongoUser User
        {
            get
            {
                return ((global::Logshark.Config.MongoUser)(base[global::Logshark.Config.MongoConnection.UserPropertyName]));
            }
            set
            {
                base[global::Logshark.Config.MongoConnection.UserPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Logshark.Config
{
    
    
    /// <summary>
    /// The PostgresConnection Configuration Element.
    /// </summary>
    public partial class PostgresConnection : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Server Property
        /// <summary>
        /// The XML name of the <see cref="Server"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ServerPropertyName = "Server";
        
        /// <summary>
        /// Gets or sets information about the Postgres server.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("Information about the Postgres server.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Logshark.Config.PostgresConnection.ServerPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Logshark.Config.PostgresServer Server
        {
            get
            {
                return ((global::Logshark.Config.PostgresServer)(base[global::Logshark.Config.PostgresConnection.ServerPropertyName]));
            }
            set
            {
                base[global::Logshark.Config.PostgresConnection.ServerPropertyName] = value;
            }
        }
        #endregion
        
        #region User Property
        /// <summary>
        /// The XML name of the <see cref="User"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string UserPropertyName = "User";
        
        /// <summary>
        /// Gets or sets settings related to the Postgres user.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("Settings related to the Postgres user.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Logshark.Config.PostgresConnection.UserPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Logshark.Config.PostgresUser User
        {
            get
            {
                return ((global::Logshark.Config.PostgresUser)(base[global::Logshark.Config.PostgresConnection.UserPropertyName]));
            }
            set
            {
                base[global::Logshark.Config.PostgresConnection.UserPropertyName] = value;
            }
        }
        #endregion
        
        #region Database Property
        /// <summary>
        /// The XML name of the <see cref="Database"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string DatabasePropertyName = "Database";
        
        /// <summary>
        /// Gets or sets information about the Postgres database instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("Information about the Postgres database instance.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Logshark.Config.PostgresConnection.DatabasePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Logshark.Config.PostgresDatabase Database
        {
            get
            {
                return ((global::Logshark.Config.PostgresDatabase)(base[global::Logshark.Config.PostgresConnection.DatabasePropertyName]));
            }
            set
            {
                base[global::Logshark.Config.PostgresConnection.DatabasePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Logshark.Config
{
    
    
    /// <summary>
    /// Information about a single MongoDB server endpoint.
    /// </summary>
    public partial class MongoServer : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Server Property
        /// <summary>
        /// The XML name of the <see cref="Server"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ServerPropertyName = "address";
        
        /// <summary>
        /// Gets or sets the hostname or IP address of the MongoDB server.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The hostname or IP address of the MongoDB server.")]
        [global::System.Configuration.StringValidatorAttribute(InvalidCharacters="", MaxLength=2147483647, MinLength=1)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Logshark.Config.MongoServer.ServerPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false, DefaultValue="localhost")]
        public virtual string Server
        {
            get
            {
                return ((string)(base[global::Logshark.Config.MongoServer.ServerPropertyName]));
            }
            set
            {
                base[global::Logshark.Config.MongoServer.ServerPropertyName] = value;
            }
        }
        #endregion
        
        #region Port Property
        /// <summary>
        /// The XML name of the <see cref="Port"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string PortPropertyName = "port";
        
        /// <summary>
        /// Gets or sets the port of the MongoDB server.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The port of the MongoDB server.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Logshark.Config.MongoServer.PortPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual int Port
        {
            get
            {
                return ((int)(base[global::Logshark.Config.MongoServer.PortPropertyName]));
            }
            set
            {
                base[global::Logshark.Config.MongoServer.PortPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Logshark.Config
{
    
    
    /// <summary>
    /// The PostgresServer Configuration Element.
    /// </summary>
    public partial class PostgresServer : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Server Property
        /// <summary>
        /// The XML name of the <see cref="Server"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ServerPropertyName = "address";
        
        /// <summary>
        /// Gets or sets the hostname or IP address of the Postgres server.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The hostname or IP address of the Postgres server.")]
        [global::System.Configuration.StringValidatorAttribute(InvalidCharacters="", MaxLength=2147483647, MinLength=1)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Logshark.Config.PostgresServer.ServerPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false, DefaultValue="localhost")]
        public virtual string Server
        {
            get
            {
                return ((string)(base[global::Logshark.Config.PostgresServer.ServerPropertyName]));
            }
            set
            {
                base[global::Logshark.Config.PostgresServer.ServerPropertyName] = value;
            }
        }
        #endregion
        
        #region Port Property
        /// <summary>
        /// The XML name of the <see cref="Port"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string PortPropertyName = "port";
        
        /// <summary>
        /// Gets or sets the port of the Postgres server.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The port of the Postgres server.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Logshark.Config.PostgresServer.PortPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false, DefaultValue=5432)]
        public virtual int Port
        {
            get
            {
                return ((int)(base[global::Logshark.Config.PostgresServer.PortPropertyName]));
            }
            set
            {
                base[global::Logshark.Config.PostgresServer.PortPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Logshark.Config
{
    
    
    /// <summary>
    /// The TuningOptions Configuration Element.
    /// </summary>
    public partial class TuningOptions : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region FilePartitioner Property
        /// <summary>
        /// The XML name of the <see cref="FilePartitioner"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string FilePartitionerPropertyName = "FilePartitioner";
        
        /// <summary>
        /// Gets or sets the FilePartitioner.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The FilePartitioner.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Logshark.Config.TuningOptions.FilePartitionerPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Logshark.Config.FilePartitioner FilePartitioner
        {
            get
            {
                return ((global::Logshark.Config.FilePartitioner)(base[global::Logshark.Config.TuningOptions.FilePartitionerPropertyName]));
            }
            set
            {
                base[global::Logshark.Config.TuningOptions.FilePartitionerPropertyName] = value;
            }
        }
        #endregion
        
        #region FileProcessor Property
        /// <summary>
        /// The XML name of the <see cref="FileProcessor"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string FileProcessorPropertyName = "FileProcessor";
        
        /// <summary>
        /// Gets or sets the FileProcessor.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The FileProcessor.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Logshark.Config.TuningOptions.FileProcessorPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Logshark.Config.FileProcessor FileProcessor
        {
            get
            {
                return ((global::Logshark.Config.FileProcessor)(base[global::Logshark.Config.TuningOptions.FileProcessorPropertyName]));
            }
            set
            {
                base[global::Logshark.Config.TuningOptions.FileProcessorPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Logshark.Config
{
    
    
    /// <summary>
    /// The FilePartitioner Configuration Element.
    /// </summary>
    public partial class FilePartitioner : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region MaxFileSizeMB Property
        /// <summary>
        /// The XML name of the <see cref="MaxFileSizeMB"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string MaxFileSizeMBPropertyName = "maxFileSizeMb";
        
        /// <summary>
        /// Gets or sets the maximum size a file can be without being partitioned, in megabytes.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The maximum size a file can be without being partitioned, in megabytes.")]
        [global::System.Configuration.IntegerValidatorAttribute(ExcludeRange=false, MaxValue=2147483647, MinValue=1)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Logshark.Config.FilePartitioner.MaxFileSizeMBPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false, DefaultValue=250)]
        public virtual int MaxFileSizeMB
        {
            get
            {
                return ((int)(base[global::Logshark.Config.FilePartitioner.MaxFileSizeMBPropertyName]));
            }
            set
            {
                base[global::Logshark.Config.FilePartitioner.MaxFileSizeMBPropertyName] = value;
            }
        }
        #endregion
        
        #region ConcurrencyLimit Property
        /// <summary>
        /// The XML name of the <see cref="ConcurrencyLimit"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ConcurrencyLimitPropertyName = "concurrencyLimit";
        
        /// <summary>
        /// Gets or sets the maximum number of files that can be partitioned concurrently.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The maximum number of files that can be partitioned concurrently.")]
        [global::System.Configuration.IntegerValidatorAttribute(ExcludeRange=false, MaxValue=2147483647, MinValue=1)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Logshark.Config.FilePartitioner.ConcurrencyLimitPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false, DefaultValue=4)]
        public virtual int ConcurrencyLimit
        {
            get
            {
                return ((int)(base[global::Logshark.Config.FilePartitioner.ConcurrencyLimitPropertyName]));
            }
            set
            {
                base[global::Logshark.Config.FilePartitioner.ConcurrencyLimitPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Logshark.Config
{
    
    
    /// <summary>
    /// The PostgresUser Configuration Element.
    /// </summary>
    public partial class PostgresUser : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Username Property
        /// <summary>
        /// The XML name of the <see cref="Username"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string UsernamePropertyName = "username";
        
        /// <summary>
        /// Gets or sets the username of the Postgres user.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The username of the Postgres user.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Logshark.Config.PostgresUser.UsernamePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string Username
        {
            get
            {
                return ((string)(base[global::Logshark.Config.PostgresUser.UsernamePropertyName]));
            }
            set
            {
                base[global::Logshark.Config.PostgresUser.UsernamePropertyName] = value;
            }
        }
        #endregion
        
        #region Password Property
        /// <summary>
        /// The XML name of the <see cref="Password"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string PasswordPropertyName = "password";
        
        /// <summary>
        /// Gets or sets the password for the Postgres user.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The password for the Postgres user.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Logshark.Config.PostgresUser.PasswordPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string Password
        {
            get
            {
                return ((string)(base[global::Logshark.Config.PostgresUser.PasswordPropertyName]));
            }
            set
            {
                base[global::Logshark.Config.PostgresUser.PasswordPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Logshark.Config
{
    
    
    /// <summary>
    /// The MongoUser Configuration Element.
    /// </summary>
    public partial class MongoUser : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Username Property
        /// <summary>
        /// The XML name of the <see cref="Username"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string UsernamePropertyName = "username";
        
        /// <summary>
        /// Gets or sets the username of the Mongo user.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The username of the Mongo user.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Logshark.Config.MongoUser.UsernamePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string Username
        {
            get
            {
                return ((string)(base[global::Logshark.Config.MongoUser.UsernamePropertyName]));
            }
            set
            {
                base[global::Logshark.Config.MongoUser.UsernamePropertyName] = value;
            }
        }
        #endregion
        
        #region Password Property
        /// <summary>
        /// The XML name of the <see cref="Password"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string PasswordPropertyName = "password";
        
        /// <summary>
        /// Gets or sets the password for the Mongo user.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The password for the Mongo user.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Logshark.Config.MongoUser.PasswordPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string Password
        {
            get
            {
                return ((string)(base[global::Logshark.Config.MongoUser.PasswordPropertyName]));
            }
            set
            {
                base[global::Logshark.Config.MongoUser.PasswordPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Logshark.Config
{
    
    
    /// <summary>
    /// The PostgresDatabase Configuration Element.
    /// </summary>
    public partial class PostgresDatabase : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Name Property
        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the name of the Postgres database instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The name of the Postgres database instance.")]
        [global::System.Configuration.StringValidatorAttribute(InvalidCharacters="", MaxLength=2147483647, MinLength=1)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Logshark.Config.PostgresDatabase.NamePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false, DefaultValue="postgres")]
        public virtual string Name
        {
            get
            {
                return ((string)(base[global::Logshark.Config.PostgresDatabase.NamePropertyName]));
            }
            set
            {
                base[global::Logshark.Config.PostgresDatabase.NamePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Logshark.Config
{
    
    
    /// <summary>
    /// Information about the Tableau Server instance where results will be published.
    /// </summary>
    public partial class TableauServerConnection : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Protocol Property
        /// <summary>
        /// The XML name of the <see cref="Protocol"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ProtocolPropertyName = "protocol";
        
        /// <summary>
        /// Gets or sets the communication protocol to use, i.e. "http" or "https".
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The communication protocol to use, i.e. \"http\" or \"https\".")]
        [global::System.Configuration.StringValidatorAttribute(InvalidCharacters="", MaxLength=5, MinLength=4)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Logshark.Config.TableauServerConnection.ProtocolPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue="http")]
        public virtual string Protocol
        {
            get
            {
                return ((string)(base[global::Logshark.Config.TableauServerConnection.ProtocolPropertyName]));
            }
            set
            {
                base[global::Logshark.Config.TableauServerConnection.ProtocolPropertyName] = value;
            }
        }
        #endregion
        
        #region Server Property
        /// <summary>
        /// The XML name of the <see cref="Server"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ServerPropertyName = "Server";
        
        /// <summary>
        /// Gets or sets the Server.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Server.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Logshark.Config.TableauServerConnection.ServerPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Logshark.Config.TableauServer Server
        {
            get
            {
                return ((global::Logshark.Config.TableauServer)(base[global::Logshark.Config.TableauServerConnection.ServerPropertyName]));
            }
            set
            {
                base[global::Logshark.Config.TableauServerConnection.ServerPropertyName] = value;
            }
        }
        #endregion
        
        #region User Property
        /// <summary>
        /// The XML name of the <see cref="User"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string UserPropertyName = "User";
        
        /// <summary>
        /// Gets or sets settings for the Tableau Server user used to publish results.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("Settings for the Tableau Server user used to publish results.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Logshark.Config.TableauServerConnection.UserPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Logshark.Config.TableauUser User
        {
            get
            {
                return ((global::Logshark.Config.TableauUser)(base[global::Logshark.Config.TableauServerConnection.UserPropertyName]));
            }
            set
            {
                base[global::Logshark.Config.TableauServerConnection.UserPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Logshark.Config
{
    
    
    /// <summary>
    /// Information about the Tableau Server endpoint.
    /// </summary>
    public partial class TableauServer : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Server Property
        /// <summary>
        /// The XML name of the <see cref="Server"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ServerPropertyName = "address";
        
        /// <summary>
        /// Gets or sets the hostname or IP address of Tableau Server.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The hostname or IP address of Tableau Server.")]
        [global::System.Configuration.StringValidatorAttribute(InvalidCharacters="", MaxLength=2147483647, MinLength=1)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Logshark.Config.TableauServer.ServerPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false, DefaultValue="localhost")]
        public virtual string Server
        {
            get
            {
                return ((string)(base[global::Logshark.Config.TableauServer.ServerPropertyName]));
            }
            set
            {
                base[global::Logshark.Config.TableauServer.ServerPropertyName] = value;
            }
        }
        #endregion
        
        #region Port Property
        /// <summary>
        /// The XML name of the <see cref="Port"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string PortPropertyName = "port";
        
        /// <summary>
        /// Gets or sets the port that Tableau Server is running on.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The port that Tableau Server is running on.")]
        [global::System.Configuration.IntegerValidatorAttribute(ExcludeRange=false, MaxValue=65535, MinValue=0)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Logshark.Config.TableauServer.PortPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false, DefaultValue=80)]
        public virtual int Port
        {
            get
            {
                return ((int)(base[global::Logshark.Config.TableauServer.PortPropertyName]));
            }
            set
            {
                base[global::Logshark.Config.TableauServer.PortPropertyName] = value;
            }
        }
        #endregion
        
        #region Site Property
        /// <summary>
        /// The XML name of the <see cref="Site"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string SitePropertyName = "site";
        
        /// <summary>
        /// Gets or sets the name of the site to publish to.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The name of the site to publish to.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Logshark.Config.TableauServer.SitePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false, DefaultValue="Default")]
        public virtual string Site
        {
            get
            {
                return ((string)(base[global::Logshark.Config.TableauServer.SitePropertyName]));
            }
            set
            {
                base[global::Logshark.Config.TableauServer.SitePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Logshark.Config
{
    
    
    /// <summary>
    /// Information about the Tableau Server user account to publish as.
    /// </summary>
    public partial class TableauUser : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Username Property
        /// <summary>
        /// The XML name of the <see cref="Username"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string UsernamePropertyName = "username";
        
        /// <summary>
        /// Gets or sets the username of the user to publish as.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The username of the user to publish as.")]
        [global::System.Configuration.StringValidatorAttribute(InvalidCharacters="", MaxLength=2147483647, MinLength=1)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Logshark.Config.TableauUser.UsernamePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false, DefaultValue="admin")]
        public virtual string Username
        {
            get
            {
                return ((string)(base[global::Logshark.Config.TableauUser.UsernamePropertyName]));
            }
            set
            {
                base[global::Logshark.Config.TableauUser.UsernamePropertyName] = value;
            }
        }
        #endregion
        
        #region Password Property
        /// <summary>
        /// The XML name of the <see cref="Password"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string PasswordPropertyName = "password";
        
        /// <summary>
        /// Gets or sets the password of this user account.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The password of this user account.")]
        [global::System.Configuration.StringValidatorAttribute(InvalidCharacters="", MaxLength=2147483647, MinLength=1)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Logshark.Config.TableauUser.PasswordPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false, DefaultValue="password")]
        public virtual string Password
        {
            get
            {
                return ((string)(base[global::Logshark.Config.TableauUser.PasswordPropertyName]));
            }
            set
            {
                base[global::Logshark.Config.TableauUser.PasswordPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Logshark.Config
{
    
    
    /// <summary>
    /// Options related to plugin execution.
    /// </summary>
    public partial class PluginOptions : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region DefaultPlugins Property
        /// <summary>
        /// The XML name of the <see cref="DefaultPlugins"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string DefaultPluginsPropertyName = "DefaultPlugins";
        
        /// <summary>
        /// Gets or sets the default set of plugins to run on every Logshark execution.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The default set of plugins to run on every Logshark execution.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Logshark.Config.PluginOptions.DefaultPluginsPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Logshark.Config.DefaultPlugins DefaultPlugins
        {
            get
            {
                return ((global::Logshark.Config.DefaultPlugins)(base[global::Logshark.Config.PluginOptions.DefaultPluginsPropertyName]));
            }
            set
            {
                base[global::Logshark.Config.PluginOptions.DefaultPluginsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Logshark.Config
{
    
    
    /// <summary>
    /// The default set of plugins to run on every Logshark execution.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::Logshark.Config.Plugin), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::Logshark.Config.DefaultPlugins.PluginPropertyName)]
    public partial class DefaultPlugins : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::Logshark.Config.Plugin"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string PluginPropertyName = "Plugin";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::Logshark.Config.DefaultPlugins.PluginPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::Logshark.Config.DefaultPlugins.PluginPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::Logshark.Config.Plugin)(element)).Name;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Logshark.Config.Plugin"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Logshark.Config.Plugin"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::Logshark.Config.Plugin();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::Logshark.Config.Plugin"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Logshark.Config.Plugin"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Logshark.Config.Plugin this[int index]
        {
            get
            {
                return ((global::Logshark.Config.Plugin)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Logshark.Config.Plugin"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::Logshark.Config.Plugin"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Logshark.Config.Plugin this[object name]
        {
            get
            {
                return ((global::Logshark.Config.Plugin)(base.BaseGet(name)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::Logshark.Config.Plugin"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="Plugin">The <see cref="global::Logshark.Config.Plugin"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(global::Logshark.Config.Plugin Plugin)
        {
            base.BaseAdd(Plugin);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::Logshark.Config.Plugin"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="Plugin">The <see cref="global::Logshark.Config.Plugin"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Remove(global::Logshark.Config.Plugin Plugin)
        {
            base.BaseRemove(this.GetElementKey(Plugin));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::Logshark.Config.Plugin"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Logshark.Config.Plugin"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Logshark.Config.Plugin GetItemAt(int index)
        {
            return ((global::Logshark.Config.Plugin)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::Logshark.Config.Plugin"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::Logshark.Config.Plugin"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Logshark.Config.Plugin GetItemByKey(string name)
        {
            return ((global::Logshark.Config.Plugin)(base.BaseGet(((object)(name)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace Logshark.Config
{
    
    
    /// <summary>
    /// Information about a Logshark plugin.
    /// </summary>
    public partial class Plugin : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Name Property
        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the name of the plugin.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The name of the plugin.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Logshark.Config.Plugin.NamePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[global::Logshark.Config.Plugin.NamePropertyName]));
            }
            set
            {
                base[global::Logshark.Config.Plugin.NamePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Logshark.Config
{
    
    
    /// <summary>
    /// A collection of MongoServer instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::Logshark.Config.MongoServer), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::Logshark.Config.MongoServers.MongoServerPropertyName)]
    public partial class MongoServers : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::Logshark.Config.MongoServer"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string MongoServerPropertyName = "Server";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::Logshark.Config.MongoServers.MongoServerPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::Logshark.Config.MongoServers.MongoServerPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::Logshark.Config.MongoServer)(element)).Server;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Logshark.Config.MongoServer"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Logshark.Config.MongoServer"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::Logshark.Config.MongoServer();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::Logshark.Config.MongoServer"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Logshark.Config.MongoServer"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Logshark.Config.MongoServer this[int index]
        {
            get
            {
                return ((global::Logshark.Config.MongoServer)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Logshark.Config.MongoServer"/> with the specified key.
        /// </summary>
        /// <param name="address">The key of the <see cref="global::Logshark.Config.MongoServer"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Logshark.Config.MongoServer this[object address]
        {
            get
            {
                return ((global::Logshark.Config.MongoServer)(base.BaseGet(address)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::Logshark.Config.MongoServer"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="Server">The <see cref="global::Logshark.Config.MongoServer"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(global::Logshark.Config.MongoServer Server)
        {
            base.BaseAdd(Server);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::Logshark.Config.MongoServer"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="Server">The <see cref="global::Logshark.Config.MongoServer"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Remove(global::Logshark.Config.MongoServer Server)
        {
            base.BaseRemove(this.GetElementKey(Server));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::Logshark.Config.MongoServer"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Logshark.Config.MongoServer"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Logshark.Config.MongoServer GetItemAt(int index)
        {
            return ((global::Logshark.Config.MongoServer)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::Logshark.Config.MongoServer"/> with the specified key.
        /// </summary>
        /// <param name="address">The key of the <see cref="global::Logshark.Config.MongoServer"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Logshark.Config.MongoServer GetItemByKey(string address)
        {
            return ((global::Logshark.Config.MongoServer)(base.BaseGet(((object)(address)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace Logshark.Config
{
    
    
    /// <summary>
    /// The FileProcessor Configuration Element.
    /// </summary>
    public partial class FileProcessor : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region ConcurrencyLimitPerCore Property
        /// <summary>
        /// The XML name of the <see cref="ConcurrencyLimitPerCore"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ConcurrencyLimitPerCorePropertyName = "concurrencyLimitPerCore";
        
        /// <summary>
        /// Gets or sets determines the degree of concurrency for file processing.  This number is multiplied by the number of logical processors on the system.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("Determines the degree of concurrency for file processing.  This number is multipl" +
            "ied by the number of logical processors on the system.")]
        [global::System.Configuration.IntegerValidatorAttribute(ExcludeRange=false, MaxValue=2147483647, MinValue=1)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Logshark.Config.FileProcessor.ConcurrencyLimitPerCorePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false, DefaultValue=1)]
        public virtual int ConcurrencyLimitPerCore
        {
            get
            {
                return ((int)(base[global::Logshark.Config.FileProcessor.ConcurrencyLimitPerCorePropertyName]));
            }
            set
            {
                base[global::Logshark.Config.FileProcessor.ConcurrencyLimitPerCorePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Logshark.Config
{
    
    
    /// <summary>
    /// The LocalMongoOptions Configuration Element.
    /// </summary>
    public partial class LocalMongoOptions : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region UseAlways Property
        /// <summary>
        /// The XML name of the <see cref="UseAlways"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string UseAlwaysPropertyName = "useAlways";
        
        /// <summary>
        /// Gets or sets indicates whether a local MongoDB instance should be used for each run.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("Indicates whether a local MongoDB instance should be used for each run.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Logshark.Config.LocalMongoOptions.UseAlwaysPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false, DefaultValue=false)]
        public virtual bool UseAlways
        {
            get
            {
                return ((bool)(base[global::Logshark.Config.LocalMongoOptions.UseAlwaysPropertyName]));
            }
            set
            {
                base[global::Logshark.Config.LocalMongoOptions.UseAlwaysPropertyName] = value;
            }
        }
        #endregion
        
        #region PurgeOnStartup Property
        /// <summary>
        /// The XML name of the <see cref="PurgeOnStartup"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string PurgeOnStartupPropertyName = "purgeOnStartup";
        
        /// <summary>
        /// Gets or sets indicates whether the local Mongo DB should be purged whenever it is started.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("Indicates whether the local Mongo DB should be purged whenever it is started.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Logshark.Config.LocalMongoOptions.PurgeOnStartupPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false, DefaultValue=true)]
        public virtual bool PurgeOnStartup
        {
            get
            {
                return ((bool)(base[global::Logshark.Config.LocalMongoOptions.PurgeOnStartupPropertyName]));
            }
            set
            {
                base[global::Logshark.Config.LocalMongoOptions.PurgeOnStartupPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Logshark.Config
{
    
    
    /// <summary>
    /// Encapsulates various runtime application options.
    /// </summary>
    public partial class RunOptions : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Tuning Property
        /// <summary>
        /// The XML name of the <see cref="Tuning"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string TuningPropertyName = "Tuning";
        
        /// <summary>
        /// Gets or sets settings pertaining to performance tuning.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("Settings pertaining to performance tuning.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Logshark.Config.RunOptions.TuningPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Logshark.Config.TuningOptions Tuning
        {
            get
            {
                return ((global::Logshark.Config.TuningOptions)(base[global::Logshark.Config.RunOptions.TuningPropertyName]));
            }
            set
            {
                base[global::Logshark.Config.RunOptions.TuningPropertyName] = value;
            }
        }
        #endregion
        
        #region LocalMongo Property
        /// <summary>
        /// The XML name of the <see cref="LocalMongo"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string LocalMongoPropertyName = "LocalMongo";
        
        /// <summary>
        /// Gets or sets settings pertaining to using a local MongoDB instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("Settings pertaining to using a local MongoDB instance.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Logshark.Config.RunOptions.LocalMongoPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Logshark.Config.LocalMongoOptions LocalMongo
        {
            get
            {
                return ((global::Logshark.Config.LocalMongoOptions)(base[global::Logshark.Config.RunOptions.LocalMongoPropertyName]));
            }
            set
            {
                base[global::Logshark.Config.RunOptions.LocalMongoPropertyName] = value;
            }
        }
        #endregion
    }
}
